strawHatPirate5 <- strawHatPirate2[age>17 & occupation=='Captain',]
View(strawHatPirate5)
attach(strawHatPirate2)
strawHatPirate5 <- strawHatPirate2[age>17 & occupation=="Captain",]
detach(strawHatPirate2)
attach(strawHatPirate2)
strawHatPirate5 <- strawHatPirate2[occupation=="Captain",]
View(strawHatPirate5)
attach(strawHatPirate2)
strawHatPirate5 <- strawHatPirate2[occupation==="Captain",]
attach(strawHatPirate2)
strawHatPirate5 <- strawHatPirate2[occupation=="Captain",]
View(strawHatPirate5)
strawHatPirate5 <- strawHatPirate2[strawHatPirate2$occupation=='Captain', ]
View(strawHatPirate5)
View(strawHatPirate5)
View(strawHatPirate)
View(strawHatPirate2)
strawHatPirate5 <- strawHatPirate2[strawHatPirate2$age>17 & strawHatPirate2$strength>30, ]#2個篩選條件使用&連接
View(strawHatPirate5)
install.packages("sqldf")
strawHatPirate6 <- sqldf("select name, occupation, bounty from strawHatPirate2 where age>17 order by age")
library(sqldf)
strawHatPirate6 <- sqldf("select name, occupation, bounty from strawHatPirate2 where age>17 order by age")
View(strawHatPirate6)
strawHatPirate6 <- sqldf("select name, occupation, bounty, age from strawHatPirate2 where age>17 order by age")
View(strawHatPirate6)
strawHatPirate6 <- sqldf("select name, occupation, bounty, age from strawHatPirate2 where age>17 order by bounty")
View(strawHatPirate6)
View(strawHatPirate2)
sqldf("select avg(age) as avgAge from strawHatPirate2")
View(devilFruitList)
sqldf("select a.name, b.devilFruit from strawHatPirate2 a inner join devilFruitList on a.name=b.name2")
sqldf("select strawHatPirate2.name, devilFruitList.devilFruit from strawHatPirate2 inner join devilFruitList on strawHatPirate2.name=devilFruitList.name2")
q()
q()
naExample <- c(88, NA, 12, 92, 33)
nullExample <- c(88, NULL, 12, 92, 33)
mean(naExample)
mean(naExample, na.rm=TRUE)#na.rm as in NA removoe
mean(nullExample)
matrix <- matrix(1:8, nrow=2)#創造一個2*4的矩陣做範例
matrix
apply(matrix, 1, sum)#把各列加總
apply(matrix, 2, sum)#把各欄加總
sumRow <- apply(matrix, 1, sum)#把各列加總
sumColumn <- apply(matrix, 2, sum)#把各欄加總
typeof(sumRow)
class(sumRow)
str(sumRow)
str(matrix)
class(matrix)
fn <- function(x){
x/10
}
fnRow <- apply(matrix, 1, fn)
fnRow
matrix
fnColumn <- apply(matrix, 2, fn)
fnColumn
?max()
max
min
maximum <- function(x){
sortX <- sort(x, decreasing=TRUE)
return sortX[1]
}
fnRow <- apply(matrix, 1, fn)
maximum <- function(x){
sortX <- sort(x, decreasing=TRUE)
return sortX[1]
}
maximum <- function(x){
return sort(x, decreasing=TRUE)[1]
}
maximum <- function(x){
sort(x, decreasing=TRUE)[1]
}
maxRow <- apply(matrix, 1, maximum)
maxColumn <- apply(matrix, 2, maximum)
maxRow
maxColumn
matrix
maximum <- function(x){
sort(x)[1]
}
maxRow <- apply(matrix, 1, maximum)
maxColumn <- apply(matrix, 2, maximum)
maximum <- function(x){
sort(x, decreasing=TRUE)[1]
}
maxRow <- apply(matrix, 1, maximum)
maxColumn <- apply(matrix, 2, maximum)
findOutliers <- function(x){
findOutlier <- function(xrow){
medianXRow <- median(xrow)
distance <- abs(xrow-medianXRow)
return(which.max(distance))
}
return(apply(x, 1, findOutlier))
}
salesMatrix <- matrix(c(1,2,30,1,10,11,1,50,60), nrow=3)
salesMatrix
salesMatrix <- matrix(c(1,2,30,1,10,11,1,50,60), nrow=3, byrow=TRUE)
salesMatrix
findOutliers(salesMatrix)
findOutliers <- function(x){
findOutlier <- function(xrow){
medianXRow <- median(xrow)
distance <- abs(xrow-medianXRow)
return(which.max(distance))
}
return(apply(x, 2, findOutlier))
}
salesMatrix <- matrix(c(1,2,30,1,10,11,1,50,60), nrow=3, byrow=TRUE)
findOutliers(salesMatrix)
findOutliers <- function(x){
findOutlier <- function(xrow){
medianXRow <- median(xrow)
distance <- abs(xrow-medianXRow)
return(max(distance))
}
return(apply(x, 1, findOutlier))
}
salesMatrix <- matrix(c(1,2,30,1,10,11,1,50,60), nrow=3, byrow=TRUE)
findOutliers(salesMatrix)
findOutliers <- function(x){
findOutlier <- function(xrow){
medianXRow <- median(xrow)
distance <- abs(xrow-medianXRow)
return(which.max(distance))
}
return(apply(x, 1, findOutlier))
}
salesMatrix <- matrix(c(1,2,30,1,10,11,1,50,60), nrow=3, byrow=TRUE)
findOutliers(salesMatrix)
findOutliers <- function(x){
findOutlier <- function(xrow){
medianXRow <- median(xrow)
distance <- abs(xrow-medianXRow)
return(which.max(distance))
}
return(apply(x, 1, findOutlier))
}
salesMatrix <- matrix(c(1,2,30,1,10,11,50,1,60), nrow=3, byrow=TRUE)
findOutliers(salesMatrix)#告訴你第一列的第三個元素、第二列的第一個
list(1:5, 11:15)
lapply(list1, meadian)#應用median函數到list1
lapply(list1, median)#應用median函數到list1
list1 <- list(1:5, 11:15)#創造一個包含兩個vector的list
lapply(list1, median)#應用median函數到list1
sapply(list1, median)#應用median函數到list1
name <- c("Monkey D. Luffy", "Roronoa Zoro", "Nami", "Sanji")
occupation <- c("Captain", "Swordsman", "Navigator", "Chef")
bounty <- c(500000000, 320000000, 66000000, NA)
age <- c(19, 21, 20, 21)
birthday <- c("5/5/1996", "11/11/1994", "7/3/1995", "3/2/1994")
strength <- c(99, 90, 15, 80)
intelligence <- c(20, 30, 90, 40)
strawHatPirate <- data.frame(name, occupation, bounty, age, birthday, strength, intelligence, stringsAsFactors=FALSE)
lapply(strawHatPirate, sort)#對每個變數都應用sort函數
sapply(strawHatPirate, sort)#對每個變數都應用sort函數
name <- c("Monkey D. Luffy", "Roronoa Zoro", "Nami", "Sanji")
occupation <- c("Captain", "Swordsman", "Navigator", "Chef")
bounty <- c(500000000, 320000000, 66000000, NA)
age <- c(19, 21, 20, 21)
birthday <- c("5/5/1996", "11/11/1994", "7/3/1995", "3/2/1994")
strength <- c(99, 90, 15, 80)
intelligence <- c(20, 30, 90, 40)
strawHatPirate <- data.frame(name, occupation, bounty, age, birthday, strength, intelligence, stringsAsFactors=FALSE)
strawHatPirate$birthdayAsDate <- as.Date(strawHatPirate$birthday, "%m/%d/%Y")#Y for 4-digit, y for 2-digit
lapply(strawHatPirate, sort)#對每個變數都應用sort函數
sapply(strawHatPirate, sort)#對每個變數都應用sort函數
strawHatPirate <- strawHatPirate[ ,-c("birthday")]
View(strawHatPirate)
strawHatPirate <- strawHatPirate[ ,-5]
View(strawHatPirate)
lapply(strawHatPirate, sort)#對每個變數都應用sort函數
sapply(strawHatPirate, sort)#對每個變數都應用sort函數
diabetes <- factor(c("Type1", "Type2", "Type1", "Type1"))
status <- factor(c("Poor", "Improved", "Excellent", "Poor"))
patient <- 1:4
patient <- as.character(1:4)
patient <- as.character(1:4)
diabetes <- factor(c("Type1", "Type2", "Type1", "Type1"))
status <- factor(c("Poor", "Improved", "Excellent", "Poor"))
patientDataFrame <- data.frame(patient, diabetes, status)
str(patientDataFrame)
patient <- as.character(1:4)
age <- (33, 55, 60, 75)
diabetes <- factor(c("Type1", "Type2", "Type1", "Type1"))
status <- factor(c("Poor", "Improved", "Excellent", "Poor"))
patientDataFrame <- data.frame(patient, diabetes, status, stringsAsFactors=F)
str(patientDataFrame)
status
tapply(age, diabetes, mean)
tapply(age, status, mean)
status <- c("Poor", "Improved", "Excellent", "Poor")
tapply(age, status, mean)#
status
diabetes
status <- c("Poor", "Improved", "Excellent", "Poor")
statusF <- factor(status)
status <- factor(c("Poor", "Improved", "Excellent", "Poor"))
age <- c(20, 33, 55, 72)
tapply(age, status, mean)
status <- factor(c("Poor", "Improved", "Excellent", "Poor", "Excellent"))
age <- c(20, 33, 55, 72, 61)
tapply(age, status, mean)
q()
year <- c(1996, 1997,	1998,	1999,	2000,	2001,	2002,	2003,	2004,	2005,	2006,	2007,	2008,	2009,	2010,	2011,	2012,	2013,	2014)
salaryReal <- c(42520, 44195, 44798, 46040, 46605, 46716, 46330, 47058, 46989, 46447, 46521, 46650, 45038, 43193, 44989, 45508, 44726, 44446, 45494)
salary <- data.frame(year, salaryReal)
str(salary)
salary$year <- as.Date(salary$year, "%Y")
plot(year, salaryReal, type="l")
points(year, salaryReal)
plot(year, salaryReal, type="l", xlab="Year", ylab="Real Salary")
points(year, salaryReal)
length(year)
year <- c(1996, 1997,	1998,	1999,	2000,	2001,	2002,	2003,	2004,	2005,	2006,	2007,	2008,	2009,	2010,	2011,	2012,	2013,	2014)
salaryReal <- c(42520, 44195, 44798, 46040, 46605, 46716, 46330, 47058, 46989, 46447, 46521, 46650, 45038, 43193, 44989, 45508, 44726, 44446, 45494)
plot(year, salaryReal, type="l", xlab="Year", ylab="Real Salary", main="Real Salary by Year")
points(year[1:4], salaryReal[1:4], col="blue", bg="blue")
points(year[5:12], salaryReal[5:12], col="green", bg="green")
points(year[13:length(year)], salaryReal[13:length(salaryReal)], col="blue", bg="blue")
plot(year, salaryReal, type="l", xlab="Year", ylab="Real Salary", main="Real Salary by Year")
points(year[1:4], salaryReal[1:4], col="blue", bg="blue", pch=22)
points(year[5:12], salaryReal[5:12], col="green", bg="green", pch=22)
points(year[13:length(year)], salaryReal[13:length(salaryReal)], col="blue", bg="blue", pch=22)
plot(year, salaryReal, type="l", xlab="Year", ylab="Real Salary", main="Real Salary by Year in Taiwan", lwd=2)
points(year[1:4], salaryReal[1:4], col="blue", bg="blue", pch=22)
points(year[5:12], salaryReal[5:12], col="green", bg="green", pch=22)
points(year[13:length(year)], salaryReal[13:length(salaryReal)], col="blue", bg="blue", pch=22)
plot(year, salaryReal, type="l", xlab="Year", ylab="Real Salary", main="Real Salary by Year in Taiwan", lwd=1)
points(year[1:4], salaryReal[1:4], col="blue", bg="blue", pch=22)
points(year[5:12], salaryReal[5:12], col="green", bg="green", pch=19)
points(year[13:length(year)], salaryReal[13:length(salaryReal)], col="blue", bg="blue", pch=22)
plot(year, salaryReal, type="l", xlab="Year", ylab="Real Salary", main="Real Salary by Year in Taiwan", lwd=1)
points(year[1:4], salaryReal[1:4], col="blue", bg="blue", pch=15)
points(year[5:12], salaryReal[5:12], col="green", bg="green", pch=16)
points(year[13:length(year)], salaryReal[13:length(salaryReal)], col="blue", bg="blue", pch=17)
sys.getlocale()
Sys.getlocale()
Sys.setlocale(category = "LC_ALL", locale = "cht")
legend(80, 75, pch=c(15,16,17), col=c("blue", "green", "blue"), c("李登輝", "陳水扁", "馬英九"), bty=”o”,  box.col=”darkgreen”, cex=.8)
legend(80, 75, pch=c(15,16,17), col=c("blue", "green", "blue"), c("李登輝", "陳水扁", "馬英九"), bty="o",  box.col="darkgreen", cex=.8)
plot(year, salaryReal, type="l", xlab="Year", ylab="Real Salary", main="台灣實質性薪資所得1996-2014", lwd=1)
points(year[1:4], salaryReal[1:4], col="blue", bg="blue", pch=15)
points(year[5:12], salaryReal[5:12], col="green", bg="green", pch=16)
points(year[13:length(year)], salaryReal[13:length(salaryReal)], col="blue", bg="blue", pch=17)
legend(80, 75, pch=c(15,16,17), col=c("blue", "green", "blue"), c("李登輝", "陳水扁", "馬英九"), bty="o",  box.col="darkgreen", cex=.8)
legend(100, 100, pch=c(15,16,17), col=c("blue", "green", "blue"), c("李登輝", "陳水扁", "馬英九"), bty="o",  box.col="darkgreen", cex=.8)
legend("topleft", pch=c(15,16,17), col=c("blue", "green", "blue"), c("李登輝", "陳水扁", "馬英九"), bty="o",  box.col="darkgreen", cex=.8)
legend("bottomright", pch=c(15,16,17), col=c("blue", "green", "blue"), c("李登輝", "陳水扁", "馬英九"), bty="o",  box.col="darkgreen", cex=.8)
plot(year, salaryReal, type="l", xlab="Year", ylab="Real Salary", main="台灣實質性薪資所得1996-2014", lwd=1)
points(year[1:4], salaryReal[1:4], col="blue", bg="blue", pch=15)
points(year[5:12], salaryReal[5:12], col="green", bg="green", pch=16)
points(year[13:length(year)], salaryReal[13:length(salaryReal)], col="blue", bg="blue", pch=17)
legend("bottomright", pch=c(15,16,17), col=c("blue", "green", "blue"), c("李登輝", "陳水扁", "馬英九"), bty="o",  box.col="darkgreen", cex=.8)
plot(year, salaryReal, type="l", xlab="Year", ylab="Real Salary", main="以100年價格衡量之實質薪資1996-2014", sub="行政院主計總處103年12月暨全年薪資與生產力統計結果",  lwd=1)
points(year[1:4], salaryReal[1:4], col="blue", bg="blue", pch=15)
points(year[5:12], salaryReal[5:12], col="green", bg="darkgreen", pch=16)
points(year[13:length(year)], salaryReal[13:length(salaryReal)], col="blue", bg="blue", pch=17)
legend("bottomright", pch=c(15,16,17), col=c("blue", "darkgreen", "blue"), c("李登輝", "陳水扁", "馬英九"), bty="o",  box.col="black", cex=.8)
plot(year, salaryReal, type="l", xlab="Year", ylab="Real Salary", main="以100年價格衡量之實質薪資1996-2014", sub="資料來源:行政院主計總處103年12月暨全年薪資與生產力統計結果",  lwd=1)
points(year[1:4], salaryReal[1:4], col="blue", bg="blue", pch=15)
points(year[5:12], salaryReal[5:12], col="green", bg="darkgreen", pch=16)
points(year[13:length(year)], salaryReal[13:length(salaryReal)], col="blue", bg="blue", pch=17)
legend("bottomright", pch=c(15,16,17), col=c("blue", "darkgreen", "blue"), c("李登輝", "陳水扁", "馬英九"), bty="o",  box.col="black", cex=.8)
plot(year, salaryReal, type="l", xlab="Year", ylab="Real Salary", main=paste("以100年價格衡量之實質薪資1996-2014", "\n", "1996-2014"), sub="資料來源: 行政院主計總處103年12月暨全年薪資與生產力統計結果",  lwd=1)
points(year[1:4], salaryReal[1:4], col="blue", bg="blue", pch=15)
points(year[5:12], salaryReal[5:12], col="green", bg="darkgreen", pch=16)
points(year[13:length(year)], salaryReal[13:length(salaryReal)], col="blue", bg="blue", pch=17)
legend("bottomright", pch=c(15,16,17), col=c("blue", "darkgreen", "blue"), c("李登輝", "陳水扁", "馬英九"), bty="o",  box.col="black", cex=.8)
plot(year, salaryReal, type="l", xlab="Year", ylab="Real Salary", main=paste("以100年價格衡量之實質薪資", "\n", "行政院主計總處103年12月暨全年薪資與生產力統計"), sub="資料來源:https://www.dgbas.gov.tw/public/Attachment/5225164112198I9Y1K.pdf",  lwd=1)
points(year[1:4], salaryReal[1:4], col="blue", bg="blue", pch=15)
points(year[5:12], salaryReal[5:12], col="green", bg="darkgreen", pch=16)
points(year[13:length(year)], salaryReal[13:length(salaryReal)], col="blue", bg="blue", pch=17)
legend("bottomright", pch=c(15,16,17), col=c("blue", "darkgreen", "blue"), c("李登輝", "陳水扁", "馬英九"), bty="o",  box.col="black", cex=.8)
plot(year, salaryReal, type="l", xlab="Year", ylab="Real Salary", main=paste("以100年價格衡量之實質薪資", "\n", "行政院主計總處103年12月暨全年薪資與生產力統計"), sub="資料來源: https://www.dgbas.gov.tw/public/Attachment/5225164112198I9Y1K.pdf",  lwd=1)
points(year[1:4], salaryReal[1:4], col="blue", bg="blue", pch=15)
points(year[5:12], salaryReal[5:12], col="green", bg="darkgreen", pch=16)
points(year[13:length(year)], salaryReal[13:length(salaryReal)], col="blue", bg="blue", pch=17)
legend("bottomright", pch=c(15,16,17), col=c("blue", "darkgreen", "blue"), c("李登輝", "陳水扁", "馬英九"), bty="o",  box.col="black", cex=.8)
plot(year, salaryReal, type="l", xlab="Year", ylab="Real Salary", main=paste(" 歷年工業及服務業受僱員工", "\n", "以100年價格衡量之實質薪資"), sub="資料來源: 行政院主計總處","\n","https://www.dgbas.gov.tw/public/Attachment/5225164112198I9Y1K.pdf",  lwd=1)
plot(year, salaryReal, type="l", xlab="Year", ylab="Real Salary", main=paste(" 歷年工業及服務業受僱員工", "\n", "以100年價格衡量之實質薪資"), sub="資料來源: 行政院主計總處","\n","https://www.dgbas.gov.tw/public/Attachment/5225164112198I9Y1K.pdf",  lwd=1)
points(year[1:4], salaryReal[1:4], col="blue", bg="blue", pch=15)
points(year[5:12], salaryReal[5:12], col="green", bg="darkgreen", pch=16)
points(year[13:length(year)], salaryReal[13:length(salaryReal)], col="blue", bg="blue", pch=17)
legend("bottomright", pch=c(15,16,17), col=c("blue", "darkgreen", "blue"), c("李登輝", "陳水扁", "馬英九"), bty="o",  box.col="black", cex=.8)
plot(year, salaryReal, type="l", xlab="Year", ylab="Real Salary", main=paste(" 歷年工業及服務業受僱員工以100年價格衡量之實質薪資"), sub=paste("資料來源: 行政院主計總處","\n","https://www.dgbas.gov.tw/public/Attachment/5225164112198I9Y1K.pdf"),  lwd=1)
points(year[1:4], salaryReal[1:4], col="blue", bg="blue", pch=15)
points(year[5:12], salaryReal[5:12], col="green", bg="darkgreen", pch=16)
points(year[13:length(year)], salaryReal[13:length(salaryReal)], col="blue", bg="blue", pch=17)
legend("bottomright", pch=c(15,16,17), col=c("blue", "darkgreen", "blue"), c("李登輝", "陳水扁", "馬英九"), bty="o",  box.col="black", cex=.8)
plot(year, salaryReal, type="l", main=paste(" 歷年工業及服務業受僱員工以100年價格衡量之實質薪資"), sub=paste("資料來源: 行政院主計總處","\n","https://www.dgbas.gov.tw/public/Attachment/5225164112198I9Y1K.pdf"),  lwd=1)
points(year[1:4], salaryReal[1:4], col="blue", bg="blue", pch=15)
points(year[5:12], salaryReal[5:12], col="green", bg="darkgreen", pch=16)
points(year[13:length(year)], salaryReal[13:length(salaryReal)], col="blue", bg="blue", pch=17)
legend("bottomright", pch=c(15,16,17), col=c("blue", "darkgreen", "blue"), c("李登輝", "陳水扁", "馬英九"), bty="o",  box.col="black", cex=.8)
legend("bottomright", pch=c(15,16,17), col=c("blue", "darkgreen", "blue"), c("李登輝", "陳水扁", "馬英九"), bty="o",  box.col="black", cex=.8)
legend("bottomright", pch=c(15,18,17), col=c("blue", "darkgreen", "blue"), c("李登輝", "陳水扁", "馬英九"), bty="o",  box.col="black", cex=.8)
legend("bottomright", pch=c(15,16,17), col=c("blue", "darkgreen", "blue"), c("李登輝", "陳水扁", "馬英九"), bty="o",  box.col="black", cex=.8)
plot(year, salaryReal, type="l", main=paste(" 歷年工業及服務業受僱員工以100年價格衡量之實質薪資"), sub=paste("資料來源: 行政院主計總處","\n","https://www.dgbas.gov.tw/public/Attachment/5225164112198I9Y1K.pdf"),  lwd=1)
points(year[1:4], salaryReal[1:4], col="blue", bg="blue", pch=15)
points(year[5:12], salaryReal[5:12], col="darkgreen", bg="darkgreen", pch=16)
points(year[13:length(year)], salaryReal[13:length(salaryReal)], col="blue", bg="blue", pch=17)
legend("bottomright", pch=c(15,16,17), col=c("blue", "darkgreen", "blue"), c("李登輝", "陳水扁", "馬英九"), bty="o",  box.col="black", cex=.8)
plot(year, salaryReal, type="l", main=paste(" 歷年工業及服務業受僱員工以100年價格衡量之實質薪資"), sub=paste("資料來源: 行政院主計總處","\n","https://www.dgbas.gov.tw/public/Attachment/5225164112198I9Y1K.pdf"),  lwd=1)
points(year[1:4], salaryReal[1:4], col="blue", bg="blue", pch=17)
points(year[5:12], salaryReal[5:12], col="darkgreen", bg="darkgreen", pch=18)
points(year[13:length(year)], salaryReal[13:length(salaryReal)], col="blue", bg="blue", pch=19)
legend("bottomright", pch=c(17,18,19), col=c("blue", "darkgreen", "blue"), c("李登輝", "陳水扁", "馬英九"), bty="o",  box.col="black", cex=.8)
plot(year, salaryReal, type="l", main=paste(" 歷年工業及服務業受僱員工以100年價格衡量之實質薪資"), sub=paste("資料來源: 行政院主計總處","\n","https://www.dgbas.gov.tw/public/Attachment/5225164112198I9Y1K.pdf"),  lwd=1)
points(year[1:4], salaryReal[1:4], col="blue", bg="blue", pch=0)
points(year[5:12], salaryReal[5:12], col="darkgreen", bg="darkgreen", pch=1)
points(year[13:length(year)], salaryReal[13:length(salaryReal)], col="blue", bg="blue", pch=2)
legend("bottomright", pch=c(0, 1, 2), col=c("blue", "darkgreen", "blue"), c("李登輝", "陳水扁", "馬英九"), bty="o",  box.col="black", cex=.8)
plot(year, salaryReal, type="l", main=paste(" 歷年工業及服務業受僱員工以100年價格衡量之實質薪資"), sub=paste("資料來源: 行政院主計總處","\n","https://www.dgbas.gov.tw/public/Attachment/5225164112198I9Y1K.pdf"),  lwd=1, xlab=NULL, ylab=NULL)
points(year[1:4], salaryReal[1:4], col="blue", bg="blue", pch=15)
points(year[5:12], salaryReal[5:12], col="darkgreen", bg="darkgreen", pch=16)
points(year[13:length(year)], salaryReal[13:length(salaryReal)], col="blue", bg="blue", pch=17)
legend("bottomright", pch=c(15, 16, 17), col=c("blue", "darkgreen", "blue"), c("李登輝", "陳水扁", "馬英九"), bty="o",  box.col="black", cex=.8)
plot(year, salaryReal, type="l", main=paste(" 歷年工業及服務業受僱員工以100年價格衡量之實質薪資"), sub=paste("資料來源: 行政院主計總處","\n","https://www.dgbas.gov.tw/public/Attachment/5225164112198I9Y1K.pdf"),  lwd=1, xlab="", ylab="")
points(year[1:4], salaryReal[1:4], col="blue", bg="blue", pch=15)
points(year[5:12], salaryReal[5:12], col="darkgreen", bg="darkgreen", pch=16)
points(year[13:length(year)], salaryReal[13:length(salaryReal)], col="blue", bg="blue", pch=17)
legend("bottomright", pch=c(15, 16, 17), col=c("blue", "darkgreen", "blue"), c("李登輝", "陳水扁", "馬英九"), bty="o",  box.col="black", cex=.8)
q()
q()
q()
setwd("C:/airbnbAtKaggle/data")
ageSummary <- read.table('age_gender_bkts.csv', sep=',', stringsAsFactors=F, header=T)
countriesSummary <- read.table('countries.csv', sep=',', stringsAsFactors=F, header=T)
sessions <- read.table('c:/sessions.csv', sep=',', stringsAsFactors=T, header=T)
trainUsers <- read.table('train_users_2.csv', sep=',', stringsAsFactors=T, header=T)
testUsers <- read.table('test_users.csv', sep=',', stringsAsFactors=T, header=T)
sessions$action_type[sessions$action_type==''] <- '-unknown-'
sessionsActionType <- sqldf("select user_id,
case when action_type=='booking_request' then 'booking_request'
when action_type=='booking_response' then 'booking_response'
when action_type=='click' then 'click'
when action_type=='data' then 'data'
when action_type=='message_post' then 'message_post'
when action_type=='modify' then 'modify'
when action_type=='partner_callback' then 'partner_callback'
when action_type=='submit' then 'submit'
when action_type=='view' then 'view'
else 'other_action_types' end as action_type,
sum(secs_elapsed) as secs_elapsed
from sessions
group by user_id, action_type
")
sessionsDeviceType <- sqldf("select user_id,
case when device_type=='Android App Unknown Phone/Tablet' then 'android_app_unknown_phone_tablet'
when device_type=='Android Phone' then 'android_phone'
when device_type=='Blackberry' then 'blackberry'
when device_type=='Chromebook' then 'chromebook'
when device_type=='iPad Tablet' then 'iPad_tablet'
when device_type=='iPodtouch' then 'iPodtouch'
when device_type=='Linux Desktop' then 'linux_desktop'
when device_type=='Mac Desktop' then 'mac_desktop'
when device_type=='Opera Phone' then 'opera_phone'
when device_type=='Tablet' then 'tablet'
when device_type=='Windows Desktop' then 'windows_desktop'
when device_type=='Windows Phone' then 'windows_phone'
else 'other_device_types' end as device_type,
sum(secs_elapsed) as secs_elapsed
from sessions
group by user_id, device_type
")
# use reshape2 package to 'dcast' the above 2 tables separately
sessionsActionTypeNew <- subset(sessionsActionType, user_id!='')
sessionsDeviceTypeNew <- subset(sessionsDeviceType, user_id!='')
row.names(sessionsActionTypeNew) <- NULL
row.names(sessionsDeviceTypeNew) <- NULL
userActionType <- dcast(sessionsActionTypeNew, user_id~action_type, sum)
userDeviceType <- dcast(sessionsDeviceTypeNew, user_id~device_type, sum)
# merge userActionType & userDeviceType
userActionDeviceSecsElapsed <- merge(userActionType, userDeviceType, by="user_id", all.x=T, all.y=T)
# replace NA with 0
userActionDeviceSecsElapsed[is.na(userActionDeviceSecsElapsed)] <- 0
# clean trainUsers/testUsers
## change id to user_id
names(trainUsers)[1] <- "user_id"
names(testUsers)[1] <- "user_id"
## transform date variables to date format; time variable to time format
trainUsers$date_account_created <- as.Date(trainUsers$date_account_created, "%Y-%m-%d")
testUsers$date_account_created <- as.Date(testUsers$date_account_created, "%Y-%m-%d")
trainUsers$date_first_booking <- as.Date(trainUsers$date_account_created, "%Y-%m-%d")
testUsers$date_first_booking <- as.Date(testUsers$date_account_created, "%Y-%m-%d")
trainUsers$timestamp_first_active <- as.character(trainUsers$timestamp_first_active)
testUsers$timestamp_first_active <- as.character(testUsers$timestamp_first_active)
trainUsers$timestamp_first_active <- strptime(trainUsers$timestamp_first_active, "%Y%m%d%H%M%S")
testUsers$timestamp_first_active <- strptime(testUsers$timestamp_first_active, "%Y%m%d%H%M%S")
## impute missing values: mean substitution, replace age NA with mean(age)
trainUsers[is.na(trainUsers$age), "age"] <- round(mean(trainUsers$age, na.rm=T))
testUsers[is.na(testUsers$age), "age"] <- round(mean(testUsers$age, na.rm=T))
## create new variable
trainUsers$date_first_active <- as.Date(trainUsers$timestamp_first_active)
testUsers$date_first_active <- as.Date(testUsers$timestamp_first_active)
trainUsers$days_first_booking_active <- trainUsers$date_first_booking-trainUsers$date_first_active
testUsers$days_first_booking_active <- testUsers$date_first_booking-testUsers$date_first_active
trainUsers$days_first_booking_created <- trainUsers$date_first_booking-trainUsers$date_account_created
testUsers$days_first_booking_created <- testUsers$date_first_booking-testUsers$date_account_created
library(ggplot2)
library(sqldf)
library(reshape2)
sessions$action_type[sessions$action_type==''] <- '-unknown-'
sessionsActionType <- sqldf("select user_id,
case when action_type=='booking_request' then 'booking_request'
when action_type=='booking_response' then 'booking_response'
when action_type=='click' then 'click'
when action_type=='data' then 'data'
when action_type=='message_post' then 'message_post'
when action_type=='modify' then 'modify'
when action_type=='partner_callback' then 'partner_callback'
when action_type=='submit' then 'submit'
when action_type=='view' then 'view'
else 'other_action_types' end as action_type,
sum(secs_elapsed) as secs_elapsed
from sessions
group by user_id, action_type
")
sessionsDeviceType <- sqldf("select user_id,
case when device_type=='Android App Unknown Phone/Tablet' then 'android_app_unknown_phone_tablet'
when device_type=='Android Phone' then 'android_phone'
when device_type=='Blackberry' then 'blackberry'
when device_type=='Chromebook' then 'chromebook'
when device_type=='iPad Tablet' then 'iPad_tablet'
when device_type=='iPodtouch' then 'iPodtouch'
when device_type=='Linux Desktop' then 'linux_desktop'
when device_type=='Mac Desktop' then 'mac_desktop'
when device_type=='Opera Phone' then 'opera_phone'
when device_type=='Tablet' then 'tablet'
when device_type=='Windows Desktop' then 'windows_desktop'
when device_type=='Windows Phone' then 'windows_phone'
else 'other_device_types' end as device_type,
sum(secs_elapsed) as secs_elapsed
from sessions
group by user_id, device_type
")
# use reshape2 package to 'dcast' the above 2 tables separately
sessionsActionTypeNew <- subset(sessionsActionType, user_id!='')
sessionsDeviceTypeNew <- subset(sessionsDeviceType, user_id!='')
row.names(sessionsActionTypeNew) <- NULL
row.names(sessionsDeviceTypeNew) <- NULL
userActionType <- dcast(sessionsActionTypeNew, user_id~action_type, sum)
userDeviceType <- dcast(sessionsDeviceTypeNew, user_id~device_type, sum)
# merge userActionType & userDeviceType
userActionDeviceSecsElapsed <- merge(userActionType, userDeviceType, by="user_id", all.x=T, all.y=T)
# replace NA with 0
userActionDeviceSecsElapsed[is.na(userActionDeviceSecsElapsed)] <- 0
# clean trainUsers/testUsers
## change id to user_id
names(trainUsers)[1] <- "user_id"
names(testUsers)[1] <- "user_id"
## transform date variables to date format; time variable to time format
trainUsers$date_account_created <- as.Date(trainUsers$date_account_created, "%Y-%m-%d")
testUsers$date_account_created <- as.Date(testUsers$date_account_created, "%Y-%m-%d")
trainUsers$date_first_booking <- as.Date(trainUsers$date_account_created, "%Y-%m-%d")
testUsers$date_first_booking <- as.Date(testUsers$date_account_created, "%Y-%m-%d")
trainUsers$timestamp_first_active <- as.character(trainUsers$timestamp_first_active)
testUsers$timestamp_first_active <- as.character(testUsers$timestamp_first_active)
trainUsers$timestamp_first_active <- strptime(trainUsers$timestamp_first_active, "%Y%m%d%H%M%S")
testUsers$timestamp_first_active <- strptime(testUsers$timestamp_first_active, "%Y%m%d%H%M%S")
## impute missing values: mean substitution, replace age NA with mean(age)
trainUsers[is.na(trainUsers$age), "age"] <- round(mean(trainUsers$age, na.rm=T))
testUsers[is.na(testUsers$age), "age"] <- round(mean(testUsers$age, na.rm=T))
## create new variable
trainUsers$date_first_active <- as.Date(trainUsers$timestamp_first_active)
testUsers$date_first_active <- as.Date(testUsers$timestamp_first_active)
trainUsers$days_first_booking_active <- trainUsers$date_first_booking-trainUsers$date_first_active
testUsers$days_first_booking_active <- testUsers$date_first_booking-testUsers$date_first_active
trainUsers$days_first_booking_created <- trainUsers$date_first_booking-trainUsers$date_account_created
testUsers$days_first_booking_created <- testUsers$date_first_booking-testUsers$date_account_created
train <- merge(trainUsers, userActionDeviceSecsElapsed, by="user_id", all.x=TRUE)
test <- merge(testUsers, userActionDeviceSecsElapsed, by="user_id", all.x=TRUE)
View(train)
View(testUsers)
trainUsers <- read.table('train_users_2.csv', sep=',', stringsAsFactors=T, header=T)
testUsers <- read.table('test_users.csv', sep=',', stringsAsFactors=T, header=T)
names(trainUsers)[1] <- "user_id"
names(testUsers)[1] <- "user_id"
## transform date variables to date format; time variable to time format
trainUsers$date_account_created <- as.Date(trainUsers$date_account_created, "%Y-%m-%d")
testUsers$date_account_created <- as.Date(testUsers$date_account_created, "%Y-%m-%d")
trainUsers$date_first_booking <- as.Date(trainUsers$date_account_created, "%Y-%m-%d")
testUsers$date_first_booking <- as.Date(testUsers$date_account_created, "%Y-%m-%d")
trainUsers$timestamp_first_active <- as.character(trainUsers$timestamp_first_active)
testUsers$timestamp_first_active <- as.character(testUsers$timestamp_first_active)
trainUsers$timestamp_first_active <- strptime(trainUsers$timestamp_first_active, "%Y%m%d%H%M%S")
testUsers$timestamp_first_active <- strptime(testUsers$timestamp_first_active, "%Y%m%d%H%M%S")
View(testUsers)
trainUsers[is.na(trainUsers$age), "age"] <- round(mean(trainUsers$age, na.rm=T))
testUsers[is.na(testUsers$age), "age"] <- round(mean(testUsers$age, na.rm=T))
## create new variable
trainUsers$date_first_active <- as.Date(trainUsers$timestamp_first_active)
testUsers$date_first_active <- as.Date(testUsers$timestamp_first_active)
trainUsers$days_first_booking_active <- trainUsers$date_first_booking-trainUsers$date_first_active
testUsers$days_first_booking_active <- testUsers$date_first_booking-testUsers$date_first_active
trainUsers$days_first_booking_created <- trainUsers$date_first_booking-trainUsers$date_account_created
testUsers$days_first_booking_created <- testUsers$date_first_booking-testUsers$date_account_created
train <- merge(trainUsers, userActionDeviceSecsElapsed, by="user_id", all.x=TRUE)
test <- merge(testUsers, userActionDeviceSecsElapsed, by="user_id", all.x=TRUE)
View(test)
View(train)
setwd("C:/airbnbAtKaggle/data")
write.csv(train, "train_v1.csv", row.names=FALSE)
write.csv(test, "test_v1.csv", row.names=FALSE)
q()
